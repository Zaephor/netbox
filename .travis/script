#!/bin/bash
echo "[***] Logging into Docker hub"
docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}" &> /dev/null
export DOCKER_REPO=index.docker.io/${DOCKER_ORG}/${CONTAINER}
export DOCKERFILE_PATH="Dockerfile"

DOCKER_ARGS=()
DOCKER_ARGS+=( "buildx" "build" "--push" )

echo "[***] Creating buildx context"
docker buildx create --name "${CONTAINER}"
docker buildx use "${CONTAINER}"
echo "[***] Bootstrapping supported platforms in buildx context"
docker buildx inspect --bootstrap
docker buildx ls

echo "[***] Checking what was already pushed to docker for reference"
docker manifest inspect "${DOCKER_ORG}/${CONTAINER}"
docker buildx imagetools inspect "${DOCKER_ORG}/${CONTAINER}"

DOCKER_TAGS=()
LATEST_VERSION=""
THIS_VERSION=""
if [[ -e "LATEST" && -e "VERSIONS" ]]; then
	echo "[***] Determining current build version for tagging"
	LATEST_VERSION=$(cat "LATEST")
	THIS_VERSION=$(tail -n1 "VERSIONS")
	echo "[***] Queued ${THIS_VERSION} for tagging"
	DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:${THIS_VERSION}" )
	SUBTAG=${THIS_VERSION}
	while [[ -n "${SUBTAG//[^.-]}" ]]; do
		LATEST_MATCH=$(awk "/${SUBTAG%.**}/ {a=\$0} END{print a}" "VERSIONS")
		if [[ "${LATEST_MATCH}" == "${THIS_VERSION}" ]]; then
			echo "[***] Queued ${SUBTAG%.**} for tagging"
			DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:${SUBTAG%.**}" )
		fi
		SUBTAG=$(echo "${SUBTAG}" | awk -F'[.-]' '{gsub("[.-]"$NF,"");print}')
	done
fi

if [[ -n "${LATEST_VERSION}" && -n "${THIS_VERSION}" && "${LATEST_VERSION}" == "${THIS_VERSION}" ]]; then
	echo "[***] Queued latest for tagging"
	DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:latest" )
else
	echo "[***] Queued debugfor tagging"
	DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:debug" )
fi
if [[ -n "${THIS_VERSION}" ]]; then
	DOCKER_ARGS+=( "--build-arg" "RELEASE=${THIS_VERSION}" )
fi

DOCKER_ARGS+=( ${DOCKER_TAGS[@]} )
FROM=$(awk '/^FROM/{print $NF}' "${DOCKERFILE_PATH}" | tail -n 1)
if [[ -n "${THIS_VERSION}" && ("${FROM}" == *'${RELEASE}' || "${FROM}" == *'$RELEASE') ]]; then
	FROM=$(echo "${FROM}" | sed -e "s@\${RELEASE}@${THIS_VERSION}@g" -e "s@\$RELEASE@${THIS_VERSION}@g")
fi
for PLAT in $(docker manifest inspect "${FROM}" | jq -c --raw-output '.manifests[].platform'); do
	PLAT_OS=$(echo "${PLAT}" | jq -c --raw-output '.os')
	PLAT_ARCH=$(echo "${PLAT}" | jq -c --raw-output '.architecture')
	PLAT_VARIANT=$(echo "${PLAT}" | jq -c --raw-output '.variant')
	if [[ -n "${PLATFORMS}" ]]; then
		PLATFORMS+=","
	fi
	PLATFORMS+="${PLAT_OS}/${PLAT_ARCH}"
	if [[ -n "${PLAT_VARIANT}" && "${PLAT_VARIANT}" != "null" ]]; then
		PLATFORMS+="/${PLAT_VARIANT}"
	fi
done
if [[ -z "${PLATFORMS}" ]]; then
	PLATFORMS="linux/amd64"
fi
DOCKER_ARGS+=( "--platform" "${PLATFORMS}" )
DOCKER_ARGS+=( "-f" "${DOCKERFILE_PATH}" "." )
echo "[***] Starting build"
docker ${DOCKER_ARGS[@]}
